{"version":3,"sources":["JS/Reducers/reducer.js","Components/ListTask.jsx","Components/DisplayTasks.jsx","Components/Tasks.js","App.js","JS/Store/store.js","index.js"],"names":["addTodoReducer","createSlice","name","initialState","reducers","addTasks","state","action","push","payload","removeTasks","filter","description","id","updateTasks","map","tasks","completeTasks","isDone","actions","reducer","ListTask","props","inputRef","useRef","className","ref","disabled","defaultValue","onKeyPress","e","value","which","current","update","onClick","focus","style","color","connect","Tasks","dispatch","obj","useState","sort","setSort","length","task","setTask","type","onChange","target","handleChange","alert","Math","floor","random","App","play","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0380d215.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\"\r\n\r\nconst initialState =[];\r\nconst addTodoReducer = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers:{\r\n        //here we write our reducer\r\n        //adding todos\r\n        addTasks: (state, action)=>{\r\n            state.push(action.payload);\r\n            return state;\r\n        }, \r\n        //reomve tasks\r\n        removeTasks: (state,action) =>{\r\n            return  state.filter(description => description.id!==action.payload);\r\n        },\r\n        //update tasks\r\n        updateTasks:(state,action)=>{\r\n            return state.map(tasks =>{\r\n                if(tasks.id === action.payload.id){\r\n                    return {\r\n                        ...tasks,\r\n                        description: action.payload.description,\r\n                    }\r\n                }\r\n                return tasks;\r\n            }) \r\n        },\r\n        //completed\r\n        completeTasks: (state,action) =>{\r\n            return state.map(tasks =>{\r\n                if(tasks.id === action.payload){\r\n                    return {\r\n                        ...tasks,\r\n                        isDone:true\r\n                    }\r\n                }\r\n                return tasks;\r\n            }) \r\n        },\r\n    }\r\n})\r\n\r\nexport const {addTasks, removeTasks, updateTasks,completeTasks} = addTodoReducer.actions;\r\nexport const reducer = addTodoReducer.reducer;","import React, { useRef } from 'react';\r\nimport  {AiFillEdit} from 'react-icons/ai'\r\nimport {IoCheckmarkDone} from 'react-icons/io5'\r\nimport {MdDelete} from 'react-icons/md'\r\n\r\nconst ListTask=(props)=> {\r\n    const {description, updateTasks, completeTasks, removeTasks} = props\r\n    const inputRef = useRef(true);\r\n    const changeFocus = () =>{\r\n        inputRef.current.disabled = false\r\n        inputRef.current.focus()\r\n    }\r\n    const update= (id,value,e)=>{\r\n        if (e.which === 13) {\r\n         // 13 is key code for enter key\r\n    updateTasks({id, description: value});\r\n    inputRef.current.disabled = true;   \r\n        }\r\n    }\r\n    return (\r\n    \r\n    <li key={description.id} className='card'>\r\n        <textarea id='tArea' ref={inputRef} disabled={inputRef} defaultValue={description.description} \r\n        onKeyPress={(e)=>update(description.id, inputRef.current.value, e)}\r\n        />\r\n        <div className=\"btns\">\r\n        <button onClick={()=>changeFocus()}><AiFillEdit/></button>\r\n        {\r\n            description.isDone === false &&(<button style={{color:\"green\"}} onClick={()=>completeTasks(description.id)}><IoCheckmarkDone/></button>)\r\n        }\r\n        <button style={{color:\"red\"}}onClick={()=> removeTasks(description.id)}> <MdDelete/></button>\r\n        </div>\r\n        {description.isDone && <span className='completed'>done</span> }\r\n    </li>\r\n\r\n    )\r\n}\r\n\r\nexport default ListTask\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { addTasks, removeTasks, updateTasks, completeTasks} from '../JS/Reducers/reducer';\r\nimport ListTask from './ListTask';\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        Tasks: state,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) =>{\r\n    return{\r\n        addTasks:(obj) =>dispatch (addTasks(obj)),\r\n        removeTasks:(id) =>dispatch (removeTasks(id)),\r\n        updateTasks:(obj) =>dispatch(updateTasks(obj)),\r\n        completeTasks:(id) =>dispatch(completeTasks(id))\r\n    };\r\n}\r\nfunction DisplayTasks(props) {\r\n    const [sort, setSort] = useState(\"active\")\r\n    return (\r\n        <div className='displaytasks'>\r\n            <div className='buttons'>\r\n                <button className='activeA' onClick={()=> setSort(\"active\")}>Active</button>\r\n                <button className='completedA'onClick={()=> setSort(\"completed\")}>Completed</button>\r\n                <button className='allA'onClick={()=> setSort(\"all\")}>All</button>\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.Tasks.length  > 0 && sort === \"active\" ?\r\n                    props.Tasks.map(description=>{\r\n                        return(\r\n                            description.isDone ===false&&\r\n                            <ListTask\r\n                            key={description.id}\r\n                            description={description}\r\n                            removeTasks={props.removeTasks}\r\n                            updateTasks={props.updateTasks}\r\n                            completeTasks={props.completeTasks}\r\n                            />\r\n                        )\r\n                    }): null} \r\n                {/* for completed items */}\r\n                {   props.Tasks.length  > 0 && sort === \"completed\" ?\r\n                    props.Tasks.map(description=>{\r\n                        return(\r\n                            description.isDone ===true &&\r\n                            <ListTask\r\n                            key={description.id}\r\n                            description={description}\r\n                            removeTasks={props.removeTasks}\r\n                            updateTasks={props.updateTasks}\r\n                            completeTasks={props.completeTasks}\r\n                            />\r\n                        )\r\n                    }): null} \r\n                    {/* for all */}\r\n                    {   props.Tasks.length  > 0 && sort === \"all\" ?\r\n                    props.Tasks.map(description=>{\r\n                        return(\r\n                            \r\n                            <ListTask\r\n                            key={description.id}\r\n                            description={description}\r\n                            removeTasks={props.removeTasks}\r\n                            updateTasks={props.updateTasks}\r\n                            completeTasks={props.completeTasks}\r\n                            />\r\n                        )\r\n                    }): null } \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(DisplayTasks);\r\n","import React, {useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTasks} from '../JS/Reducers/reducer';\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        Tasks: state,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps =(dispatch) =>{\r\n    return{\r\n        addTasks:(obj) =>dispatch (addTasks(obj)),\r\n    }\r\n}\r\nconst Tasks = (props) => {\r\n    const [task, setTask] = useState(``);\r\n    \r\n    const handleChange= (e) =>{\r\n        setTask(e.target.value);\r\n    }\r\n    const add =() =>{\r\n        if( task===''){\r\n            alert('Input is empty');\r\n        }\r\n        else{\r\n            props.addTasks({\r\n                id: Math.floor(Math.random()*1000), \r\n                description:task,\r\n                isDone:false\r\n            })\r\n            setTask(''); \r\n    \r\n        }\r\n    }    //console.log(\"props from store\", props);\r\n    return (\r\n        <div className='addTasks'>\r\n          <input \r\n          type={'text'} \r\n          onChange={(e)=> handleChange(e)} \r\n          className='task-input'\r\n          id='task-input' \r\n          value={task}\r\n          />\r\n          <button \r\n        className='add-btn'\r\n        onClick={() => add()}\r\n        > ADD</button>\r\n        <br/>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\n//we can use connect method to connect this component with redux store\r\nexport default connect(mapStateToProps,mapDispatchToProps) (Tasks);\r\n","\nimport './CSS/main.css';\nimport DisplayTasks from './Components/DisplayTasks';\nimport Tasks from './Components/Tasks';\n\n\nfunction App(play) {\n\n  return (\n    <div className=\"App\">\n      <h1>To-Do App</h1>\n      <Tasks/>\n      <DisplayTasks/>\n    </div>\n  );\n}\n\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport {reducer} from '../Reducers/reducer'\r\n\r\nconst store = configureStore({\r\n    reducer:reducer\r\n});\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './JS/Store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> {/* the component Provider needs a props store  */}\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}